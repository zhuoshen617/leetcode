
class Solution {
public:
    void merge(vector<long long>& vec, int start, int end, long long lower, long long upper, int & count)
    {
        if (start >= end)
        {
            if (vec[start] >= lower && vec[start] <= upper)
            {
                cout << start << endl;
                count++;
            }
            return;
        }

        int mid = (start+ end)/2;
        merge(vec, start, mid, lower, upper, count);
        merge(vec, mid+1, end, lower, upper, count);

        // three pointers
        // second sorted array [x,x,x,x,x,x] [mid+1, end]
        //                      |
        //                      k
        // first sorted array [y,y,y,y,y,y,y,y,y,y,y,y,y]  [start, mid]
        //                     |->
        //                    left
        //                  |->
        //                right

        int left = start, right = start - 1;
        int k = mid+1;

        for (; k <= end; k++)
        {
            while (right + 1 <= mid && vec[k] - vec[right+1] >= lower)
                right++;

            while (left <= mid && vec[k] - vec[left] > upper)
                left++;

            if (right >= left)
            {
                count += right - left + 1;
            }
        }


        // merge sort
        vector<long long> result;
        int i = start, j = mid+1;
        while (i <= mid && j <= end)
        {
            if (vec[i] > vec[j])
                result.push_back(vec[j++]);
            else
                result.push_back(vec[i++]);
        }

        while (i <= mid)
            result.push_back(vec[i++]);

        while (j <= end)
            result.push_back(vec[j++]);

        for (auto n : result)
            vec[start++] = n;
    }
    
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        if (nums.size() == 0)
            return 0;
        
        long long sum = 0;
        vector<long long> sums;
        for (auto n : nums)
        {
            sum += (long long)n;
            sums.push_back(sum);
        }
        
        int result = 0;
        merge(sums, 0, sums.size()-1, lower, upper, result);
  
        return result;
    }
};
