// this is a surprisingly easy greedy method
// all you need to do is find out the max frequent num and see if we can form at least that many subsequences.

class Obj {
public:
    int num;
    int count;
    Obj(int n, int c):num(n), count(c) {}
    bool operator< (Obj o)const
    {
        return count > o.count;
    }
};

class Solution {
public:
    bool canDivideIntoSubsequences(vector<int>& nums, int K) {
        unordered_map<int, int> hashmap;
        for (auto num : nums)
            hashmap[num]++;
        vector<Obj> vec;
        for (auto p : hashmap)
            vec.push_back(Obj(p.first, p.second));
        
        sort(vec.begin(), vec.end());
        
        int maxCount = vec[0].count;
        
        if (nums.size() / maxCount < K)
            return false;
        
        return true;
    }
};
