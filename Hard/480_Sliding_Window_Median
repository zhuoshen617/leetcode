// use two multiset to maintain the sliding window
// left has equal or 1 more element than the right set
// make sure the two sets are balanced


class Solution {
public:
    vector<double> medianSlidingWindow(vector<int>& nums, int k) {
        vector<double> result;
        if (k == 1)
        {
            for (auto n : nums)
                result.push_back(n);
            return result;
        }
        
        multiset<long long> left;
        multiset<long long> right;
        
        for (int i = 0; i < nums.size(); i++)
        {
            if (left.size() + right.size() == k)
            {
                auto it = left.find(nums[i-k]);
                if (it != left.end())
                    left.erase(it);
                else
                    right.erase(right.find(nums[i-k]));
            }
            
            if (left.size() == 0 || nums[i] <= *(--left.end()))
                left.insert(nums[i]);
            else
                right.insert(nums[i]);
            
            if (left.size() + right.size() < k)
                continue;
            
            while(left.size() > right.size() + 1)
            {
                right.insert(*(--left.end()));
                left.erase(--left.end());
            }
            
            while(right.size() > left.size())
            {
                left.insert(*right.begin());
                right.erase(right.begin());
            }
            
            if (k % 2 == 0)
                result.push_back((*(--left.end()) + *right.begin())/2.0);
            else
                result.push_back(*(--left.end()));
            
            
        }
                                 
        
        return result;
    }
};