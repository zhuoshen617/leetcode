// merge sort idea, key is to write the two pointer logic 

class Solution {
public:
    void merge(vector<int>& vec, int start, int end, int & count)
    {
       if (start >= end)
           return;

       int mid = (start+ end)/2;
       merge(vec, start, mid, count);
       merge(vec, mid+1, end, count);
        
       // [x,x,x,x]   [y,y,y,y]
       //  |           |
       // leftStart    rightStart
       int startLeft = start, rightStart = mid+1;
       long long n = 2;
       for  (; rightStart <= end; rightStart++)
       {
           while(startLeft <= mid && vec[startLeft] <= n * vec[rightStart])
               startLeft++;
           
           if (startLeft <= mid)
               count += mid - startLeft + 1;
       }
        
       // merge sort
       vector<int> result;
       int i = start, j = mid+1;
       while (i <= mid && j <= end)
       {
           if (vec[i] > vec[j])
               result.push_back(vec[j++]);
           else
               result.push_back(vec[i++]);
       }

       while (i <= mid)
           result.push_back(vec[i++]);

       while (j <= end)
           result.push_back(vec[j++]);

       for (auto n : result)
           vec[start++] = n;
    }
    
    int reversePairs(vector<int>& nums) {
        int count = 0;
      
        merge(nums, 0, nums.size()-1, count);
       
        return count;
    }
};