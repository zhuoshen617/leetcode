// have two player picking at the same time from 0,0 to N-1,N-1
// simulate all possible state with DP and with 
// the key insight is r1 + c1 = r2 + c2


class Solution {
public:
    int cherryPickup(vector<vector<int>>& grid) {
        size_t n = grid.size();
        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(n+1, vector<int>(n+1, -1)));
        dp[0][0][0] = 0;
        dp[1][0][1] = 0;
        dp[1][0][0] = 0;
        dp[0][1][1] = 0;
        dp[0][1][0] = 0;
        
    
        for (int r1 = 1; r1 < n+1; r1++)
        {
            for (int c1 = 1; c1 < n+1; c1++)
            {
                for (int r2 = 1; r2 < n+1; r2++)
                {
                    dp[r1][c1][r2] = -1;
                 
                    int c2 = r1+c1-r2;
                    if (c2 <= 0 || c2 > n)
                        continue;
                        
                    if (grid[r1-1][c1-1] == -1 || grid[r2-1][c2-1] == -1)
                        continue;
                    
                    if (dp[r1-1][c1][r2-1] >= 0)
                        dp[r1][c1][r2] = max(dp[r1][c1][r2], dp[r1-1][c1][r2-1]);
                    
                    if (dp[r1-1][c1][r2] >= 0)
                        dp[r1][c1][r2] = max(dp[r1][c1][r2], dp[r1-1][c1][r2]);
                    
                    if (dp[r1][c1-1][r2-1] >= 0)
                        dp[r1][c1][r2] = max(dp[r1][c1][r2], dp[r1][c1-1][r2-1]);
                    
                    if (dp[r1][c1-1][r2] >= 0)
                        dp[r1][c1][r2] = max(dp[r1][c1][r2], dp[r1][c1-1][r2]);
                    
                    if (dp[r1][c1][r2] < 0)
                        continue;
                    
                    if (r1 == r2 && c1 == c2)
                        dp[r1][c1][r2] += grid[r1-1][c1-1];
                    else
                        dp[r1][c1][r2] += grid[r1-1][c1-1] + grid[r2-1][c2-1];
                }
            }
        }
        
        if (dp[n][n][n] == -1)
            return 0;
        
        return dp[n][n][n];
    }
};