// recursive + memo

class Solution {
public:
    unordered_map<string, unordered_map<string, bool>> hashmap;
    bool isScramble(string s1, string s2) {
        
        if (s1.size() != s2.size())
            return false;
        
        if (s1 == s2)
            return true;
        
        if (hashmap.count(s1) && hashmap[s1].count(s2))
            return hashmap[s1][s2];
        
        
        for (int len = 1; len <= s1.size()-1; len++)
        {
            if (isScramble(s1.substr(0, len), s2.substr(0,len))
                && isScramble(s1.substr(len), s2.substr(len)))
            {
                hashmap[s1][s2] = true;
                return true;
            }
            if (isScramble(s1.substr(0, len), s2.substr(s1.size()-len))
               && isScramble(s1.substr(len), s2.substr(0, s1.size()-len)))
            {
                   hashmap[s1][s2] = true;
                   return true;
            }
        }
        
        hashmap[s1][s2] = false;
        return false;
    }
};