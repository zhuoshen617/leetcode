

// DP solution, O(n3)
typedef pair<int, int> P;

class Solution {
public:
    int longestDecomposition(string text) {
        size_t n = text.size();
        vector<vector<P>> dp(n, vector<P>(n));
        for (int i = 0; i < n; i++)
            dp[i][i] = P(1, 0);
        
        for (int i = 1; i < n; i++)
        {
            if (text[i-1] == text[i])
                dp[i-1][i] = P(2, 1);
            else
                dp[i-1][i] = P(1, 0);
        }
        
        for (int len = 3; len <= n; len++)
        {
            for (int i = 0; i < n && i + len - 1 < n; i++)
            {
                int j = i + len - 1;
                dp[i][j] = P(1,0);
                
                int pos = 0;
                while (i + pos < j - pos)
                {
                    if (text[i + pos] == text[j])
                    {
                       dp[i][j] = P(dp[i+pos+1][j-pos-1].first + 2, pos+1);
                       break;
                    }
                    
                    if (dp[i+pos][j-pos-1].second == 0)
                       break;
                    
                    pos += dp[i+pos][j-pos-1].second;
                }
            }
        }
        
        return dp[0][n-1].first;
    }
};

// greedy solution
class Solution {
public:
    int longestDecomposition(string text) {
        int i = 0, j = text.size()-1;
        string l, r;
        int count = 0;
        while (i <= j)
        {
            l = l + text[i];
            r = text[j] + r;
            
            if (l == r)
            {
                // odd length text
                if (i == j)
                    count++;
                else
                    count += 2;
                l = r = "";
            }
            
            i++;
            j--;
        }
        
        // cannot form a match for most inner word
        if (l.size())
            count++;
        
        return count;
    }
};