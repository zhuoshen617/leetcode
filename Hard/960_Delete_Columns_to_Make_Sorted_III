// a brute force solution is to iterate all the column, we either delete or not delete
// this way it is 2^100, but this give us an insight to create dp state transition
// we want to see if we can derive this keep or not keep from previous results.
// then it becomes intuitive.


class Solution {
public:
    int minDeletionSize(vector<string>& A) {
        int m = A.size(), n = A[0].size();
        vector<vector<int>> dp(n, vector<int>(2, A.size()));
        //dp[j][0] -- keep j column, min value to delete
        //dp[j][1] -- delete j column, min value to delete
        
        dp[0][0] = 0;
        dp[0][1] = 1;
        for (int j = 1; j < n; j++)
        {
            dp[j][1] = 1 + min(dp[j-1][0], dp[j-1][1]);
            dp[j][0] = j;
            for (int i = 0; i < j; i++)
            {
                bool found = true;
                for (int k = 0; k < m; k++)
                {
                    if (A[k][j] < A[k][i])
                    {
                        found = false;
                        break;
                    }
                }
                
                if (found)
                    dp[j][0] = min(dp[j][0], dp[i][0] + j-i-1); // we need to keep i col
            }
        }
        
        return min(dp[n-1][0], dp[n-1][1]);
    }
};

// longest increasing subsequence
// the question is equivalent to what is longest length of sorted strings

class Solution {
public:
    int minDeletionSize(vector<string>& A) {
        int m = A.size(), n = A[0].size();
        vector<int> dp(n, 1);
        int maxLen = 0;
        for (int i = 1; i < n; i++)
        {
            for (int j = 0; j < i; j++)
            {
                bool found = true;
                for (int k = 0; k < m; k++)
                {
                    if (A[k][i] < A[k][j])
                    {
                        found = false;
                        break;
                    }
                }
                
                if (found)
                    dp[i] = max(dp[i], dp[j] + 1);
            }
            
            maxLen = max(maxLen, dp[i]);
        }
     
        return n - maxLen;
    }
};
